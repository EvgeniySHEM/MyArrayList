package ru.sanctio.dataStructures.myList;

import java.util.Comparator;

/**
 * Упорядоченная коллекция элементов. Пользователь этого интерфейса имеет точный контроль над тем,
 * где в списке вставляется каждый элемент. Добавление элемента возможно по целочисленному индексу (положению в списке)
 * и в конец списка. Допускает хранение дублирующих элементов и null значений.
 * Пользователь может получать доступ к элементу по его целочисленному индексу (положению в списке)
 * и искать элемент в списке.
 * Пользователь может получить количество элементов в этом списке.
 * Позволяет проверить на отсутствие элементов в этом списке.
 * Реализует возможность удалить элемент по первому вхождению указанного элемента из этого списка,
 * если он присутствует. Если этот список не содержит элемента, он не изменяется.
 * Пользователь имеет возможность очистить список от всех, присутствующих в нем, элементов.
 * Позволяет заменить элемент в указанной позиции в этом списке указанным элементом.
 * Предоставляет возможность отсортировать этот список в порядке возрастания в соответствии с естественным
 * порядком его элементов, или в соответствии с заданным компаратором.
 */
public interface MyList<E> {
    /**
     * Добавляет указанный элемент в конец списка.
     *
     * @param element - элемент, который будет добавлен в список
     * @throws ArrayIndexOutOfBoundsException - если вместимость может превысить Integer.MAX_VALUE.
     */
    void add(E element);

    /**
     * Добавляет указанный элемент на указанный индекс.
     *
     * @param index   - индекс, на который будет добавлен элемент.
     * @param element - элемент, который будет добавлен в этот список.
     * @throws ArrayIndexOutOfBoundsException - если вместимость может превысить Integer.MAX_VALUE.
     */
    void add(int index, E element);

    /**
     * Проверяет количество элементов в списке.
     *
     * @return - количество элементов в списке.
     */
    int size();

    /**
     * Проверяет отсутствие элементов в списке.
     *
     * @return - true, если список не содержит элементов.
     */
    boolean isEmpty();

    /**
     * Возвращает элемент в указанной позиции в списке.
     *
     * @param index – индекс возвращаемого элемента.
     * @return - элемент в указанной позиции в списке.
     * @throws IndexOutOfBoundsException – если индекс выходит за пределы диапазона (index < 0 || index >= size())
     */
    E get(int index);

    /**
     * Возвращает первое вхождение указанного элемента из списка, если оно присутствует,
     * если элемент отсутствует в списке, вернет null.
     *
     * @param element - элемент, который нужно найти в списке, если он присутствует.
     * @return - первое вхождение указанного элемента из списка.
     * @throws NullPointerException - если указанная ссылка на объект равна нулю.
     */
    E get(E element);

    /**
     * Удаляет первое вхождение указанного элемента из списка, если оно присутствует.
     * Если список не содержит элемента, он не изменяется.
     *
     * @param element - элемент, который нужно удалить из списка, если он присутствует
     * @return - true, если список содержит указанный элемент
     * (или, что, то же самое, если список изменился в результате вызова).
     */
    boolean remove(E element);

    /**
     * Удаляет все элементы из списка.
     */
    void clear();

    /**
     * Заменяет элемент в указанной позиции в списке указанным элементом.
     *
     * @param index   индекс элемента для замены
     * @param element элемент, который будет сохранен в указанной позиции
     * @return элемент, ранее находившийся в указанной позиции
     * @throws IndexOutOfBoundsException - если индекс выходит за пределы диапазона (индекс < 0 || индекс >= размер())
     */
    E set(int index, E element);

    /**
     * Сортирует указанный диапазон списка объектов в порядке возрастания
     * в соответствии с указанным Comparator'ом.
     *
     * @param fromIndex  - начальный индекс диапазона сортировки(включительно).
     * @param toIndex    - конечный индекс диапазона сортировки(включительно).
     * @param comparator - Comparator для определения сортировки этого списка.
     */
    void sort(int fromIndex, int toIndex, Comparator<? super E> comparator);

    /**
     * Сортирует указанный диапазон списка объектов в порядке возрастания
     * в соответствии с естественным порядком его элементов.
     *
     * @param fromIndex - начальный индекс диапазона сортировки(включительно).
     * @param toIndex   - конечный индекс диапазона сортировки(включительно).
     */
    void sort(int fromIndex, int toIndex);

}
